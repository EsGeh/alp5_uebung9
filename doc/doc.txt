Alp3 - Übung 9

Aufgabe 1.
Benutzung:
	1. java RMI-Server starten:
		$ ./startJavaRMI
	2. den Server für die Anwendung starten:
		$ ./startRMIServer.sh
	3. den Klienten starten
		$ ./startRMIClient.sh
		enter URL:
	4. "localhost counter" eingeben
	"counter" ist der Name der zu startenden Anwendung (dies ist die einzige implementierte Anwendung)

Ordnerstruktur in ./aufgabe1/ :
	./src		enthält den Quellcode.
	./src/client 	enthält den Quellcode für den Klienten
	./src/server 	enthält den Quellcode für den Server
	./src/common 	enthält Quellcode, der sowohl für den Klienten als auch für den Anbieter benötigt wird (hauptsächlich Java-Interfaces)
	
	./bin		enthält das Kompilat
	
Erklärung: Beim ersten Aufruf sollte sich der Client im Unterordner "cookies" eine Session-ID merken. Nach einem Neustart des Klienten wird die alte Session wieder aufgegriffen (siehe Konsolen-Ausgabe des Klienten). Das heißt, die Zählerstände bleiben erhalten. Um eine neue Session-ID zu bekommen, kann der Ordner "cookies" einfach gelöscht werden.
"counter" ist bisher die einzige unterstützte Anwendung. Die Architektur erlaubt allerdings das einfache Hinzufügen von weiteren Anwendungen.


Aufgabe (2)

Wir haben uns dazu entschieden die Anwendung "Akkumulator" aus Aufgabe (1) c)
als Webanwendung zu implementieren.

Verwendete Technologien:
Wir haben uns entschieden Python(3) zu benutzen und dabei zusätzlich zur
Standardbibliothek die Bibliothek "Cherrypy" eingesetzt. Diese muss, zusätzlich
zu einer aktuellen Version von Python-3 über einen der üblichen Wege (System-Paketverwaltung,
pip, easyinstall) installiert sein. Man testet die erfolgreiche Installation, indem 
man "import cherrypy" innerhalb der interaktiven Python-Umgebung aufruft. Die Python-Version
wird beim aufrufen der Python-Umgebung angegeben (ob nun python oder noch python3 Python-3
startet, hängt von der verwendeten Distribution ab).

Man startet den server einfach durch "python akkumulator.py". Dann lässt sich im
Browser über localhost:8080 lokal, bzw. IP-Adresse:8080 im lokalen Netzwerk die Web-
anwendung aufrufen.

Die Webanwendung nutzt Cookies zur Identifizierung der Nutzer. Will man von Vorne mit
dem Akkumulieren anfangen, so muss man manuell im Browser den Cookie löschen. Ein Neustart
des Servers allein führt zu Fehlern, wenn der alte Cookie noch existiert. Man muss
in diesem Fall auch den Cookie löschen.

Als Eingaben gehen nur Ganze Zahlen durch(also auch negative Werte, mit vorangestelltem "-").
Vorangestellte Nullen werden ignoriert, alles andere durch HTML-Formular-Pattern-Matching
abgefangen.

CherryPy ist sehr leichtgewichtig. Es wird also kein Code "generiert". Alles (auch das HTML!)
befindet sich in dem einen File "akkumulator.py" im Ordner "aufgabe2". CherryPy gibt uns
einen einfachen Webserver sowie Methoden auf Cookies zuzugreifen. Man kann durch die
kleine Größe des Skripts einfach nachvollziehen, was unsere Anwendung wie tut.
